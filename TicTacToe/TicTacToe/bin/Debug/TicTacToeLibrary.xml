<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TicTacToeLibrary</name>
    </assembly>
    <members>
        <member name="T:TicTacToeLibrary.CellState">
            <summary>
            CellState enum is state of every game block.
            </summary>
        </member>
        <member name="F:TicTacToeLibrary.CellState.Empty">
            <summary>
            State of block is empty.
            </summary>
        </member>
        <member name="F:TicTacToeLibrary.CellState.X">
            <summary>
            Block is occupied by X.
            </summary>
        </member>
        <member name="F:TicTacToeLibrary.CellState.O">
            <summary>
            Block is occupied by O.
            </summary>
        </member>
        <member name="T:TicTacToeLibrary.Board">
            <summary>
            Two dimensional board which hold information of player markers.
            </summary>
        </member>
        <member name="F:TicTacToeLibrary.Board.arr">
            <summary>
            Array which hold every block of the game.
            </summary>
        </member>
        <member name="M:TicTacToeLibrary.Board.#ctor">
            <summary>
            Constructor for Board class, sets every block to empty.
            </summary>
        </member>
        <member name="T:TicTacToeLibrary.Game">
            <summary>
            Class maintaining game logic.
            </summary>
        </member>
        <member name="P:TicTacToeLibrary.Game.player1Turn">
            <summary>
            player1Turn checks which player turn it is.
            </summary>
        </member>
        <member name="P:TicTacToeLibrary.Game.gameBoard">
            <summary>
            gameBoard is object that holds information of every game block.
            </summary>
        </member>
        <member name="P:TicTacToeLibrary.Game.isOver">
            <summary>
            isOver checks if game is over.
            </summary>
        </member>
        <member name="P:TicTacToeLibrary.Game.p1Score">
            <summary>
            Score of player one.
            </summary>
        </member>
        <member name="P:TicTacToeLibrary.Game.p2Score">
            <summary>
            Score of player2
            </summary>
        </member>
        <member name="P:TicTacToeLibrary.Game.lastXCPU">
            <summary>
            Last row on which cpu set its block.
            </summary>
        </member>
        <member name="P:TicTacToeLibrary.Game.lastYCPU">
            <summary>
            Last column on which cpu set its block.
            </summary>
        </member>
        <member name="F:TicTacToeLibrary.Game.rnd">
            <summary>
            CPU add block on random position if cannot do otherwise.
            </summary>
        </member>
        <member name="M:TicTacToeLibrary.Game.#ctor">
            <summary>
            Constructor for Game class.
            </summary>
        </member>
        <member name="M:TicTacToeLibrary.Game.SetBlock(System.Int32,System.Int32)">
            <summary>
            Method allowing to change specific block state.
            </summary>
            <param name="x">Row of block next to change.</param>
            <param name="y">Column of block next to change</param>
        </member>
        <member name="M:TicTacToeLibrary.Game.CheckForLine">
            <summary>
            Method checks for line of same blocks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TicTacToeLibrary.Game.CheckVertical">
            <summary>
            Method checks for vertical line.
            </summary>
            <returns>Return true if there is a vertical line.</returns>
        </member>
        <member name="M:TicTacToeLibrary.Game.CheckHorizontal">
            <summary>
            Method checks for horizontal line.
            </summary>
            <returns>Returns true if there is horizontal line.</returns>
        </member>
        <member name="M:TicTacToeLibrary.Game.CheckDiagonal">
            <summary>
            Method checks for diagonal line.
            </summary>
            <returns>Returns true if there is diagonal line.</returns>
        </member>
        <member name="M:TicTacToeLibrary.Game.CheckDraw">
            <summary>
            Method checks if every block is set as X or O.
            </summary>
            <returns>Return true if all block are either X or O and none player won.</returns>
        </member>
        <member name="M:TicTacToeLibrary.Game.EndGame">
            <summary>
            Method ends game.
            </summary>
        </member>
        <member name="M:TicTacToeLibrary.Game.Reset">
            <summary>
            Method resets gameBoard.
            </summary>
        </member>
        <member name="M:TicTacToeLibrary.Game.SetScore">
            <summary>
            Method sets scores for players.
            </summary>
        </member>
        <member name="M:TicTacToeLibrary.Game.SetBlockCPURandom">
            <summary>
            If CPU cannot do otherwise it sets O on random place in game array
            </summary>
        </member>
        <member name="M:TicTacToeLibrary.Game.SetBlockCPU">
            <summary>
            Method setting block by CPU.
            </summary>
        </member>
        <member name="M:TicTacToeLibrary.Game.SetBlockCPUHorizontal">
            <summary>
            Check if CPU should block players horizontal line for win.
            </summary>
            <returns>Return true if CPU blocked player from winning.</returns>
        </member>
        <member name="M:TicTacToeLibrary.Game.SetBlockCPUVertical">
            <summary>
            Checks if CPU should block players vertical winning line.
            </summary>
            <returns>Return true if blocked player from winning.</returns>
        </member>
        <member name="M:TicTacToeLibrary.Game.SetBlockCPUDiagonal">
            <summary>
            Checks if CPU should block players winning line.
            </summary>
            <returns>Return true if blocked player from winning</returns>
        </member>
    </members>
</doc>
